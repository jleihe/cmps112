head	1.15;
access;
symbols;
locks;
comment	@# @;


1.15
date	2013.10.10.19.17.20;	author -;	state -;
branches;
next	1.14;

1.14
date	2013.03.28.19.52.29;	author -;	state -;
branches;
next	1.13;

1.13
date	2013.03.08.01.08.51;	author -;	state -;
branches;
next	1.12;

1.12
date	2013.02.02.03.39.39;	author -;	state -;
branches;
next	1.11;

1.11
date	2011.08.19.22.46.48;	author -;	state -;
branches;
next	1.10;

1.10
date	2011.06.18.02.59.51;	author -;	state -;
branches;
next	1.9;

1.9
date	2009.12.15.03.29.08;	author -;	state -;
branches;
next	1.8;

1.8
date	2009.01.06.04.26.47;	author -;	state -;
branches;
next	1.7;

1.7
date	2009.01.03.04.47.27;	author -;	state -;
branches;
next	1.6;

1.6
date	2009.01.03.04.41.09;	author -;	state -;
branches;
next	1.5;

1.5
date	2009.01.03.04.38.39;	author -;	state -;
branches;
next	1.4;

1.4
date	2009.01.03.04.37.52;	author -;	state -;
branches;
next	1.3;

1.3
date	2009.01.03.04.32.32;	author -;	state -;
branches;
next	1.2;

1.2
date	2009.01.03.04.20.53;	author -;	state -;
branches;
next	1.1;

1.1
date	2009.01.03.04.07.24;	author -;	state -;
branches;
next	;


desc
@@


1.15
log
@-
@
text
@#!/usr/bin/perl
# $Id: mkreadme,v 1.14 2013-03-28 12:52:29-07 - - $
#
# NAME
#    mkreadme
#
# SYNOPSIS
#    mkreadme Readme-all-txt
#
# DESCRIPTION
#    Looks for a file matching "Readme.all.*.txt" and copies all
#    non-comment lines into "Readme.new.*.txt", then calls
#    txt2html to format the text file into html, and txthtpspdf
#    to create Postcript and PDF files from each.
#

$0 =~ s|^(.*/)?([^/]+)/*$|$2|;
@@ARGV == 1 and $all = $ARGV[0] or die "Usage: $0 Readme-all-txt\n";
system "cid $all";

$new = $all;
$new =~ s/\.all\./\.new\./;
open ALL, "<$all" or die "$0: $new: $!\n";
open NEW, ">$new" or die "$0: $new: $!\n";

while (<ALL>) {
   if (m/^\s*#/) {$mark = "=="}
            else {printf NEW "%6d%-2s%s", $., $mark, $_; $mark = ""}
}

close ALL;
close NEW;

for $file ($all, $new) {
   system "txt2html $file";
   $psfile = $file;
   $psfile =~ s/\.txt$/.ps/;
   system "mkpspdf -cg $psfile $file";
}

sub mklink ($$) {
   my ($file, $link) = @@_;
   @@glob = glob $file;
   warn "$0: glob $file: not unique\n" and return unless @@glob == 1;
   $file = $glob[0];
   unlink $link;
   symlink $file, $link or warn "$0: link $file, $link: $!\n";
}

mklink "Readme.new.*.html", "README.html";
mklink "Readme.new.*.txt", "README.cat";

system "cat $new";
system "echo Post.* $new";

@


1.14
log
@-
@
text
@d2 1
a2 1
# $Id: mkreadme,v 1.13 2013-03-07 17:08:51-08 - - $
d38 1
a38 1
   system "mkpspdf + $psfile $file";
@


1.13
log
@-
@
text
@d2 1
a2 1
# $Id: mkreadme,v 1.12 2013-02-01 19:39:39-08 - - $
d19 1
@


1.12
log
@-
@
text
@d2 1
a2 1
# $Id: mkreadme,v 1.11 2011-08-19 15:46:48-07 - - $
d13 1
a13 1
#    txthtpspdf to format the text file into html, and txthtpspdf
d48 1
@


1.11
log
@-
@
text
@d2 1
a2 1
# $Id: mkreadme,v 1.10 2011-06-17 19:59:51-07 - - $
d8 1
a8 1
#    mkreadme
d11 2
a12 2
#    Looks for a file matching "readme.all.*.txt" and copies all
#    non-comment lines into "readme.new.*.txt", then calls
d18 1
a18 5

$glob = "Readme.all.*.txt";
@@all = glob $glob;
die "$0: glob $glob: not unique\n" unless @@all == 1;
$all = shift @@all;
d48 2
a49 2
mklink "readme.new.*.html", "README.html";
mklink "readme.new.*.txt", "README.cat";
@


1.10
log
@-
@
text
@d2 1
a2 1
# $Id: mkreadme,v 1.9 2009-12-14 19:29:08-08 - - $
d19 1
a19 1
$glob = "readme.all.*.txt";
@


1.9
log
@-
@
text
@d2 1
a2 1
# $Id: mkreadme,v 1.8 2009-01-05 20:26:47-08 - - $
d11 2
a12 2
#    Looks for a file matching "Readme.all.*.txt" and copies all
#    non-comment lines into "Readme.new.*.txt", then calls
d19 1
a19 1
$glob = "README.all.*.txt";
d45 1
a45 1
   my ($link, $file) = @@_;
d48 1
d50 1
a50 1
   symlink $link, $file or warn "$0: link $link, $file: $!\n";
d52 2
a53 2
mklink "README.new.*.html", "README.html";
mklink "README.new.*.txt", "README";
@


1.8
log
@-
@
text
@d2 1
a2 1
# $Id: mkreadme,v 1.7 2009-01-02 20:47:27-08 - - $
d17 1
a17 1
$0 =~ s|^.*/||;
d19 1
a19 1
$glob = "Readme.all.*.txt";
d21 1
a21 1
die "$0: $glob: not unique\n" unless @@all == 1;
d25 1
a25 1
$new =~ s/all/new/;
d44 9
a52 5
$html = $new;
$html =~ s/\.txt$/.html/;
$link = "README.html";
unlink $link;
symlink $html, $link or die "$0: link $html $link: $!";
@


1.7
log
@-
@
text
@d2 1
a2 1
# $Id: mkreadme,v 1.6 2009-01-02 20:41:09-08 - - $
d37 6
a42 5
system "txt2html $all";
system "txt2html $new";
$psfile = $all;
$psfile =~ s/\.txt$/.ps/;
system "mkpspdf + $psfile $all";
@


1.6
log
@-
@
text
@d2 1
a2 1
# $Id: mkreadme,v 1.5 2009-01-02 20:38:39-08 - - $
d49 3
@


1.5
log
@-
@
text
@d2 1
a2 1
# $Id: mkreadme,v 1.4 2009-01-02 20:37:52-08 - - $
d47 1
a47 1
link $html, $link or die "$0: link $html $link: $!";
@


1.4
log
@-
@
text
@d2 1
a2 1
# $Id: mkreadme,v 1.3 2009-01-02 20:32:32-08 - - $
d46 1
@


1.3
log
@-
@
text
@d2 1
a2 1
# $Id: mkreadme,v 1.2 2009-01-02 20:20:53-08 - - $
d34 1
a35 1
close ALL;
d37 5
a41 6
for $txtfile ($all, $new) {
   system "txt2html $txtfile";
   $psfile = $txtfile;
   $psfile =~ s/\.txt$/.ps/;
   system "mkpspdf $psfile $txtfile";
}
d47 1
@


1.2
log
@-
@
text
@d2 1
a2 1
# $Id: mkreadme,v 1.1 2009-01-02 20:07:24-08 - - $
d31 1
a31 1
            else {printf "%6d%-2s%s", $., $mark, $_; $mark = ""}
d37 3
a39 3
for $txtfile ($all $new) {
   system "txt2html $file";
   $psfile = $file;
d41 1
a41 1
   system :mkpspdf $psfile $txtfile";
d43 5
@


1.1
log
@-
@
text
@d1 2
a2 2
#!/bin/sh
# $Id$
d17 26
a42 7
WILDCARD='Readme.all.*.txt'
SOURCE=`ls $WILDCARD | head -1`
if [ "$SOURCE" = "" ] ; then
   echo `basename $0`: no file matching $WILCARD
   exit 1
fi
echo OK
@
