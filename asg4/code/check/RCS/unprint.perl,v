head	1.3;
access;
symbols;
locks;
comment	@# @;


1.3
date	2010.11.16.04.17.51;	author -;	state -;
branches;
next	1.2;

1.2
date	2010.11.16.04.14.18;	author -;	state -;
branches;
next	1.1;

1.1
date	2010.11.16.04.09.07;	author -;	state -;
branches;
next	;


desc
@@


1.3
log
@-
@
text
@#!/usr/bin/perl
# $Id: unprint.perl,v 1.2 2010-11-15 20:14:18-08 - - $
#
# Uses <> to read all input and convert unprintable characters,
# according to the current locale, to octal escapes.
#

use POSIX qw (setlocale LC_CTYPE isprint);
setlocale LC_CTYPE, "en_US.ISO8859-1";

sub unprint ($) {
   my ($char) = @@_;
   return $char if isprint $char or $char eq "\n";
   my $ord = ord $char;
   return sprintf "^%c", $ord ^ 0x40 if $ord < 0x80;
   return sprintf "\\%03o", $ord;
}

s/./unprint $&/ge and print while <>

@


1.2
log
@-
@
text
@d2 1
a2 1
# $Id: unprint.perl,v 1.1 2010-11-15 20:09:07-08 - - $
d13 1
a13 1
   return $char if isprint $char;
d19 1
a19 5
while ($line = <>) {
   chomp $line;
   $line =~ s/./unprint $&/ge;
   print $line, "\n";
}
@


1.1
log
@-
@
text
@d2 1
a2 1
# $Id$
d8 2
a9 2
use POSIX qw (setlocale LC_CTYPE);
setlocale LC_CTYPE, "";
d13 1
a13 1
   return $char if $char =~ m/^[[:print:]]$/;
d15 2
a16 3
   return sprintf "^%c", $ord ^ 0x40 if $char =~ m/^[[:ascii:]]$/;
   return sprintf "\\%03o", $ord if $char =~ m/^.$/;
   die "$0: unprint ($char): not one character\n";
@
