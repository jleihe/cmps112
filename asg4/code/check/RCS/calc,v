head	1.3;
access;
symbols;
locks;
comment	@# @;


1.3
date	2013.05.21.19.57.20;	author -;	state -;
branches;
next	1.2;

1.2
date	2011.06.11.02.20.58;	author -;	state -;
branches;
next	1.1;

1.1
date	2008.10.01.21.50.48;	author -;	state -;
branches;
next	;


desc
@@


1.3
log
@-
@
text
@#!/usr/bin/perl -w
# $Id: calc,v 1.2 2011-06-10 19:20:58-07 - - $
#
# NAME
#    calc
#
# SYNOPSIS
#    calc [exprs...]
#
# DESCRIPTION
#    Read each line, evaluate it as a Perl expression, and
#    print the value.  If @@ARGV is given, treat each element
#    of @@ARGV as a line.  Each input line or @@ARGV element is
#    a Perl expression, except that something matching the
#    pattern /\#(\d+)/ refers to the value of line $1 and a
#    match of /\#/ is the value of the most recent line.
#

use constant pi => 4 * atan2 (1, 1);
sub log2 ($) {log ($_[0]) / log (2)}
sub log10 ($) {log ($_[0]) / log (10)}
sub rad ($) {$_[0] * 2 * PI / 360}

$INPUT = @@ARGV ? 'shift @@ARGV' : '<>';

while ($CALC = eval ($INPUT)) {
   $CALC =~ s{\#(\d+)?}
             {"\$CALC[" . (defined ($1) ? $1 : $#CALC) . "]"}xge;
   push @@CALC, $CALC = eval ($CALC) || 1e1000 / 1e1000;
   printf "#%d=\t%.15g\n%s", $#CALC, $CALC, $@@;
}

@


1.2
log
@-
@
text
@d2 1
a2 1
# $Id: calc,v 1.1 2008-10-01 14:50:48-07 - - $
d19 1
a19 1
use constant PI => 4 * atan2 (1, 1);
@


1.1
log
@-
@
text
@d1 2
a2 2
#!/usr/local/bin/perl -w
# $Id: calc,v 357.2 2007-12-10 13:28:38-08 - - $
d19 4
a22 2
sub log2 ($) {log ($_[0]) / log (2) };
sub log10 ($) {log ($_[0]) / log (10) };
d31 2
a32 1
};
@
